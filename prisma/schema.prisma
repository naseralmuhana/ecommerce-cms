// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id         String      @id() @default(cuid())
  name       String      @db.VarChar(255)
  userId     String      @map("user_id")
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")
  billboards Billboard[]
  categories Category[]
  sizes      Size[]
  colors     Color[]
  products   Product[]

  @@map("stores")
}

model Billboard {
  id         String     @id @default(cuid())
  label      String     @db.VarChar(255)
  imageUrl   String     @map("image_url")
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")
  storeId    String     @map("store_id")
  store      Store      @relation(fields: [storeId], references: [id])
  categories Category[]

  @@index([storeId])
  @@map("billboards")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @db.VarChar(255)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  storeId     String    @map("store_id")
  store       Store     @relation(fields: [storeId], references: [id])
  billboardId String    @map("billboard_id")
  billboard   Billboard @relation(fields: [billboardId], references: [id])

  @@index([storeId])
  @@index([billboardId])
  @@map("categories")
}

model Size {
  id        String        @id @default(cuid())
  name      String        @db.VarChar(255)
  value     String        @db.VarChar(255)
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")
  storeId   String        @map("store_id")
  store     Store         @relation(fields: [storeId], references: [id])
  products  ProductSize[]

  @@index([storeId])
  @@map("sizes")
}

model Color {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(255)
  value     String   @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  storeId   String   @map("store_id")
  store     Store    @relation(fields: [storeId], references: [id])

  @@index([storeId])
  @@map("colors")
}

model Product {
  id         String        @id @default(cuid())
  name       String        @db.VarChar(255)
  price      Decimal       @db.Decimal()
  isFeatured Boolean       @default(false) @map("is_featured")
  isArchived Boolean       @default(false) @map("is_archived")
  createdAt  DateTime      @default(now()) @map("created_at")
  updatedAt  DateTime      @updatedAt @map("updated_at")
  storeId    String        @map("store_id")
  store      Store         @relation(fields: [storeId], references: [id])
  images     Image[]
  sizes      ProductSize[]

  @@index([storeId])
  @@map("products")
}

model Image {
  id        String   @id @default(cuid())
  url       String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  productId String   @map("product_id")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@map("images")
}

model ProductSize {
  productId  String   @map("product_id")
  product    Product  @relation(fields: [productId], references: [id], onDelete: Restrict)
  sizeId     String   @map("size_id")
  size       Size     @relation(fields: [sizeId], references: [id], onDelete: Restrict)
  assignedAt DateTime @default(now())

  @@id([sizeId, productId])
  @@index([sizeId])
  @@index([productId])
  @@map("products_sizes")
}
